#+Title: aula 29 de maio de 2020

* exercicios

- 2.82
- 2.83
- 2.84
- 2.85

* aula

- modularização de sistemas: objetos (environment model) e streams of
  information

- set! e begin exemplo balance. Mas withdraw não é uma função? Por
  que? Quais outras já vimos durante o curso?

#+BEGIN_SRC racket
(define balance 100)

(define (withdraw amount)
  (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))
#+END_SRC

- local state e encapsulated variable

#+BEGIN_SRC racket
(define new-withdraw
  (let ((balance 100))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))))

(define w (new-withdraw))
(w 100)
(w 10)
#+END_SRC

- formal parameters are already local

#+BEGIN_SRC racket
(define (make-withdraw balance)
  (lambda (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))

(define W1 (make-withdraw 100))
(define W2 (make-withdraw 100))
(W1 50)
(W2 10)
#+END_SRC

- comportamento independente de dois objetos

#+BEGIN_SRC racket
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  dispatch)

(define acc (make-account 100))
((acc 'withdraw) 50)
((acc 'withdraw) 60)
;; "Insufficient funds"

((acc 'deposit) 40)
((acc 'withdraw) 60)

;; another obj
(define acc2 (make-account 100))
#+END_SRC

- what about the substitution model of evaluation (section 1.1.5)?

- ex 3.1
- ex 3.2
- ex 3.3
- ex 3.4


