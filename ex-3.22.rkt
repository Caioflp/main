#lang sicp

(define (make-queue)
  (let* ((front-ptr nil)
	 (rear-ptr nil))
    (define (print-queue)
      (cons front-ptr rear-ptr))
    (define (front-ptr-proc)
      front-ptr)
    (define (rear-ptr-proc)
      rear-ptr)
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
	  (error "FRONT called with an ampty queue" (print-queue))
	  (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item nil)))
	(cond ((empty-queue?)
	       (set-front-ptr! new-pair)
	       (set-rear-ptr! new-pair)
	       (print-queue))
	      (else 
		(set-cdr! rear-ptr new-pair)
		(set-rear-ptr! new-pair)
		(print-queue)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
	     (error "DELETE! called with an empty queue" (print-queue)))
	    (else (set-front-ptr! (cdr (front-ptr)))
		  (print-queue))))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr)
	     (front-ptr-proc))
	    ((eq? m 'rear-ptr)
	     (rear-ptr-proc))
	    ((eq? m 'set-front-ptr!)
	     set-front-ptr!)
	    ((eq? m 'set-rear-ptr!)
	     set-rear-ptr!)
	    ((eq? m 'empty-queue?)
	     (empty-queue?))
	    ((eq? m 'front-queue)
	     (front-queue))
	    ((eq? m 'insert-queue!)
	     insert-queue!)
	    ((eq? m 'delete-queue!)
	     (delete-queue!))))
    dispatch))

;; teste

(define q1 (make-queue))

((q1 'insert-queue!) 'a)
((q1 'insert-queue!) 'b)
(q1 'front-ptr)
(q1 'rear-ptr)
(q1 'delete-queue)
